RayLib example function
std::vector<Color> GenerateGradient(Color baseColor, int numColors, float step) {
    std::vector<Color> colors;

    if (numColors <= 1) {
        colors.push_back(baseColor);
        return colors;
    }

    float t = 0.0f;
    float stepUp = step / (float)(numColors / 2 - 1);
    for (int i = 0; i < numColors / 2; i++)
    {
        Color clr;

        clr.r = (unsigned char)(baseColor.r + (255 - baseColor.r) * t);
        clr.g = (unsigned char)(baseColor.g + (255 - baseColor.g) * t);
        clr.b = (unsigned char)(baseColor.b + (255 - baseColor.b) * t);
        clr.a = baseColor.a;
        colors.push_back(clr);

        t += stepUp;
    }

    // Calculate the gradient for decreasing values
    t = 0.0f;
    float stepDown = step / (float)(numColors / 2 - 1);
    for (int i = 0; i < numColors / 2; i++)
    {
        Color clr;

        clr.r = (unsigned char)(baseColor.r - baseColor.r * t);
        clr.g = (unsigned char)(baseColor.g - baseColor.g * t);
        clr.b = (unsigned char)(baseColor.b - baseColor.b * t);
        clr.a = baseColor.a;
        colors.push_back(clr);

        t += stepDown;
    }

    // Sort the colors from darkest to brightest
    std::sort(colors.begin(), colors.end(), [](const Color& c1, const Color& c2) {
        return (c1.r + c1.g + c1.b) < (c2.r + c2.g + c2.b);
        });

 //   return colors;
}
[SNIPPET_CODE_END]
This is a function I wrote that uses raylib as a foundation
This is such a good function