webpack
// On importe le module 'path' pour la résolution des chemins de nos dossiers et fichiers
const path = require('path');
// On importe le plugin 'HotModuleReplacementPlugin' depuis 'webpack' le hot reload
const { HotModuleReplacementPlugin } = require('webpack');
// On importe le plugin 'HtmlWebpackPlugin' pour intégrer le fichier index.html au dossier de sortir
const HtmlWebpackPlugin = require('html-webpack-plugin');

// On exporte l'objet de configuration
module.exports = {
	// On indique à webpack le point d'entrée
	// ici, le fichier JS racine de l'application
    entry: path.resolve(__dirname, './src/index.js'),
	// Configuration des plugins
    plugins: [
        new HotModuleReplacementPlugin(),
        new HtmlWebpackPlugin({
            template: path.resolve(__dirname, 'public', 'index.html'),
        }),
    ],
	// On indique à webpack le dossier de sortie et le nom du fichier qui doit être généré
    output: {
        path: path.resolve(__dirname, 'build'),
        filename: 'bundle.js',
    },
	// Configuration du serveur de développement
    devServer: {
        // Indique à webpack d'afficher un overlay avec le message d'erreur en cas d'erreur dans le code
        client: {
            overlay: true,
        },
		// On indique à webpack dans quel dossier se trouve les fichiers à observer pour le serveur de développement
        static: {
            directory: path.resolve(__dirname, './public'),
        },
		// Port sur lequel va s'exécuter l'application
        port: 3000,
		// Permet le rechargement des modules JavaScript sans rechargement complet de l'application
        hot: true,
        // Compression gzip (allège le poid du contenu renvoyé au navigateur)
		compress: true,
    },
};
[SNIPPET_CODE_END]
